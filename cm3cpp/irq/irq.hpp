#pragma once

#ifdef STM32F2
#include <libopencm3/stm32/f2/nvic.h>
#endif
#ifdef STM32F4
#include <libopencm3/stm32/f4/nvic.h>
#endif

namespace cm3cpp {

#ifdef STM32F2
enum class Interrupt : uint32_t
{
    ISR_NVIC_WWDG = 0,
    ISR_PVD,
    ISR_TAMP_STAMP,
    ISR_RTC_WKUP,
    ISR_FLASH,
    ISR_RCC,
    ISR_EXTI0,
    ISR_EXTI1,
    ISR_EXTI2,
    ISR_EXTI3,
    ISR_EXTI4,
    ISR_DMA1_STREAM0,
    ISR_DMA1_STREAM1,
    ISR_DMA1_STREAM2,
    ISR_DMA1_STREAM3,
    ISR_DMA1_STREAM4,
    ISR_DMA1_STREAM5,
    ISR_DMA1_STREAM6,
    ISR_ADC,
    ISR_CAN1_TX,
    ISR_CAN1_RX0,
    ISR_CAN1_RX1,
    ISR_CAN1_SCE,
    ISR_EXTI9_5,
    ISR_TIM1_BRK_TIM9,
    ISR_TIM1_UP_TIM10,
    ISR_TIM1_TRG_COM_TIM11,
    ISR_TIM1_CC,
    ISR_TIM2,
    ISR_TIM3,
    ISR_TIM4,
    ISR_I2C1_EV,
    ISR_I2C1_ER,
    ISR_I2C2_EV,
    ISR_I2C2_ER,
    ISR_SPI1,
    ISR_SPI2,
    ISR_USART1,
    ISR_USART2,
    ISR_USART3,
    ISR_EXTI15_10,
    ISR_RTC_ALARM,
    ISR_USB_FS_WKUP,
    ISR_TIM8_BRK_TIM12,
    ISR_TIM8_UP_TIM13,
    ISR_TIM8_TRG_COM_TIM14,
    ISR_TIM8_CC,
    ISR_DMA1_STREAM7,
    ISR_FSMC,
    ISR_SDIO,
    ISR_TIM5,
    ISR_SPI3,
    ISR_UART4,
    ISR_UART5,
    ISR_TIM6_DAC,
    ISR_TIM7,
    ISR_DMA2_STREAM0,
    ISR_DMA2_STREAM1,
    ISR_DMA2_STREAM2,
    ISR_DMA2_STREAM3,
    ISR_DMA2_STREAM4,
    ISR_ETH,
    ISR_ETH_WKUP,
    ISR_CAN2_TX,
    ISR_CAN2_RX0,
    ISR_CAN2_RX1,
    ISR_CAN2_SCE,
    ISR_OTG_FS,
    ISR_DMA2_STREAM5,
    ISR_DMA2_STREAM6,
    ISR_DMA2_STREAM7,
    ISR_USART6,
    ISR_I2C3_EV,
    ISR_I2C3_ER,
    ISR_OTG_HS_EP1_OUT,
    ISR_OTG_HS_EP1_IN,
    ISR_OTG_HS_WKUP,
    ISR_OTG_HS,
    ISR_DCMI,
    ISR_CRYP,
    ISR_HASH_RNG,
};
#endif

#ifdef STM32F4
enum Interrupt : uint32_t
{
    ISR_NVIC_WWDG = 0,
    ISR_PVD,
    ISR_TAMP_STAMP,
    ISR_RTC_WKUP,
    ISR_FLASH,
    ISR_RCC,
    ISR_EXTI0,
    ISR_EXTI1,
    ISR_EXTI2,
    ISR_EXTI3,
    ISR_EXTI4,
    ISR_DMA1_STREAM0,
    ISR_DMA1_STREAM1,
    ISR_DMA1_STREAM2,
    ISR_DMA1_STREAM3,
    ISR_DMA1_STREAM4,
    ISR_DMA1_STREAM5,
    ISR_DMA1_STREAM6,
    ISR_ADC,
    ISR_CAN1_TX,
    ISR_CAN1_RX0,
    ISR_CAN1_RX1,
    ISR_CAN1_SCE,
    ISR_EXTI9_5,
    ISR_TIM1_BRK_TIM9,
    ISR_TIM1_UP_TIM10,
    ISR_TIM1_TRG_COM_TIM11,
    ISR_TIM1_CC,
    ISR_TIM2,
    ISR_TIM3,
    ISR_TIM4,
    ISR_I2C1_EV,
    ISR_I2C1_ER,
    ISR_I2C2_EV,
    ISR_I2C2_ER,
    ISR_SPI1,
    ISR_SPI2,
    ISR_USART1,
    ISR_USART2,
    ISR_USART3,
    ISR_EXTI15_10,
    ISR_RTC_ALARM,
    ISR_USB_FS_WKUP,
    ISR_TIM8_BRK_TIM12,
    ISR_TIM8_UP_TIM13,
    ISR_TIM8_TRG_COM_TIM14,
    ISR_TIM8_CC,
    ISR_DMA1_STREAM7,
    ISR_FSMC,
    ISR_SDIO,
    ISR_TIM5,
    ISR_SPI3,
    ISR_UART4,
    ISR_UART5,
    ISR_TIM6_DAC,
    ISR_TIM7,
    ISR_DMA2_STREAM0,
    ISR_DMA2_STREAM1,
    ISR_DMA2_STREAM2,
    ISR_DMA2_STREAM3,
    ISR_DMA2_STREAM4,
    ISR_ETH,
    ISR_ETH_WKUP,
    ISR_CAN2_TX,
    ISR_CAN2_RX0,
    ISR_CAN2_RX1,
    ISR_CAN2_SCE,
    ISR_OTG_FS,
    ISR_DMA2_STREAM5,
    ISR_DMA2_STREAM6,
    ISR_DMA2_STREAM7,
    ISR_USART6,
    ISR_I2C3_EV,
    ISR_I2C3_ER,
    ISR_OTG_HS_EP1_OUT,
    ISR_OTG_HS_EP1_IN,
    ISR_OTG_HS_WKUP,
    ISR_OTG_HS,
    ISR_DCMI,
    ISR_CRYP,
    ISR_HASH_RNG,
    ISR_FPU,
    ISR_UART7,
    ISR_UART8,
    ISR_SPI4,
    ISR_SPI5,
    ISR_SPI6,
    ISR_SAI1,
    ISR_LCD_TFT,
    ISR_LCD_TFT_ERR,
    ISR_DMA2D,
};
#endif

#ifndef CM3CPP_CUSTOM_INTERRUPT_SERVICE
class IInterruptable
{
 public:
    IInterruptable() = default;
    virtual ~IInterruptable() = default;

    static void register_isr(Interrupt interrupt,
                             IInterruptable* interrupt_owner);
    virtual void call() = 0;
};
#endif

} /* namespace cm3cpp */
